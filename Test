using System;
using System.IO;
using System.Threading;
using System.ComponentModel;
using System.Configuration;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using wManager;
using wManager.Plugin;
using wManager.Wow.Class;
using wManager.Wow.Enums;
using wManager.Wow.Helpers;
using wManager.Wow.ObjectManager;
using robotManager.Helpful;
using robotManager.Products;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.TrackBar;
using System.Timers;
using System.Text.RegularExpressions;


public class Main : IPlugin
{
    private string butlerVersion = "1.7";
    private string ButlerPrefix = "[Butler] ";
    private bool ButlerLaunched = false;
    private int shortDelay = 100;
    private int longDelay = 500;
    private string[] itemStatConstants = null;
    private WoWItem EquippedItem1 = null;
    private WoWItem EquippedItem2 = null;
    private List<WoWItem> EquippedItems = null;
    private Dictionary<string, float> itemValues = new Dictionary<string, float>();
    private List<WoWItem> bagItems;
    private Dictionary<int, int> itemValueOverrides = new Dictionary<int, int>();
    private bool firstCycle = true;
    private SwimUpPlugin swimUpPlugin; // Объявление плагина
    private MacroPlugin _macroPlugin; // Объявление Macro
    private static System.Timers.Timer _timer;


    public void Initialize()
    {
        ButlerLaunched = true;
        ButlerSettings.Load();
        ButlerGlobalSettings.Load();
        ButlerBlackListSettings.Load();
        LoadClassMultipliers();

        QuestRewardSelector.Initialize(); // Подключаем авто-выбор наград
        BagEquipManager.Initialize(); // Подключаем авто-экипировку сумок
        _macroPlugin = new MacroPlugin();
        _macroPlugin.Initialize();
        swimUpPlugin = new SwimUpPlugin(); // Создаем экземпляр плагина
        swimUpPlugin.Initialize(); // Запускаем плагин AutoSwim

        // Настроить таймер с интервалом в 1000 миллисекунд (1 секунда)
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += OnTick; // Подписка на событие по истечении времени
        _timer.Start();

        Logging.Write(ButlerPrefix + "Butler version " + butlerVersion + " is loaded and ready");
        itemStatConstants = getItemStatConstants();
        getitemValueOverrides();
        if (ButlerGlobalSettings.CurrentSetting.pulseDelay < 1000 || ButlerGlobalSettings.CurrentSetting.pulseDelay > 60000) { ButlerGlobalSettings.CurrentSetting.pulseDelay = 3000; }
        while (ButlerLaunched && Products.IsStarted)
        {
            try
            {
                if (wManager.Wow.Helpers.Conditions.InGameAndConnectedAndAliveAndProductStartedNotInPause)
                {
                    if (!ObjectManager.Me.InCombat && !ObjectManager.Me.IsDead)
                    {
                        PulseLevelUp();
                        getBagItems();
                        getEquippedItems();
                        if ((ButlerGlobalSettings.CurrentSetting.gameVersion.Substring(0, 1) != "1") && (ButlerGlobalSettings.CurrentSetting.gameVersion.Substring(0, 1) != "2"))
                        {
                            PulseEquip();
                        }
                        getBagItems();
                        PulseDestroy();
                    }
                }
            }
            catch (Exception e) { Logging.WriteError(ButlerPrefix + "there was an error: " + e); }
            Thread.Sleep(ButlerGlobalSettings.CurrentSetting.pulseDelay);
            firstCycle = false;
        }
    }

    private void LoadClassMultipliers()
    {
        WoWClass playerClass = ObjectManager.Me.WowClass;
        if (ButlerSettings.ClassMultipliers.ContainsKey(playerClass))
        {
            foreach (var stat in ButlerSettings.ClassMultipliers[playerClass])
            {
                typeof(ButlerSettings).GetProperty($"multi{stat.Key}")?.SetValue(ButlerSettings.CurrentSetting, stat.Value);
            }
        }
    }

    private static void OnTick(object sender, ElapsedEventArgs e)
    {
        // Вызываем метод SetIgnore() каждый раз, когда срабатывает таймер
        IgnoreCombat.SetIgnore();
    }

    private void PulseLevelUp()
    {
        if (ButlerBlackListSettings.CurrentSetting.playerLevel != wManager.Wow.ObjectManager.ObjectManager.Me.Level)
        {
            ButlerBlackListSettings.CurrentSetting.playerLevel = wManager.Wow.ObjectManager.ObjectManager.Me.Level;
            ButlerBlackListSettings.CurrentSetting.blackItems = new List<string>();
            Logging.Write(ButlerPrefix + "blacklist cleared");
            ButlerBlackListSettings.CurrentSetting.Save();
        }
    }


    private void PulseDestroy()
    {
        if (ButlerSettings.CurrentSetting.DestroyGray)
        {
            foreach (WoWItem item in bagItems)
            {
                if (item.GetItemInfo.ItemRarity == 0)
                {
                    while (ObjectManager.Me.InCombat || ObjectManager.Me.IsDead) { Thread.Sleep(shortDelay); }
                    List<int> BagAndSlot = Bag.GetItemContainerBagIdAndSlot(item.Entry);
                    Logging.Write(ButlerPrefix + "destroying \"" + GetItemNameFromLink(item.GetItemInfo.ItemLink) + "\"");
                    Lua.LuaDoString(string.Format("PickupContainerItem({0}, {1}); DeleteCursorItem()", (object)BagAndSlot[0], (object)BagAndSlot[1]), false);
                    Thread.Sleep(shortDelay);
                }
            }
        }
    }

    private void PulseEquip()
    {
        foreach (WoWItem item in bagItems)
        {
            if (item.IsEquippableItem)
            {
                if ((item.GetItemInfo.ItemRarity == 0 && ButlerSettings.CurrentSetting.EquipGray)
                    || (item.GetItemInfo.ItemRarity == 1 && ButlerSettings.CurrentSetting.EquipWhite)
                    || (item.GetItemInfo.ItemRarity == 2 && ButlerSettings.CurrentSetting.EquipGreen)
                    || (item.GetItemInfo.ItemRarity == 3 && ButlerSettings.CurrentSetting.EquipBlue)
                    || (item.GetItemInfo.ItemRarity == 4 && ButlerSettings.CurrentSetting.EquipEpic)
                    || (item.GetItemInfo.ItemRarity == 5 && ButlerSettings.CurrentSetting.EquipLegendary))
                {
                    checkThisItem(item);
                    Thread.Sleep(shortDelay);
                }
            }
        }
    }
    private void checkThisItem(WoWItem item)
    {
        if (item.GetItemInfo.ItemMinLevel <= wManager.Wow.ObjectManager.ObjectManager.Me.Level)
        {
            float itemValue = getItemValue(item);
            if (itemValue != 0)
            {
                if (!ButlerBlackListSettings.CurrentSetting.blackItems.Contains(item.GetItemInfo.ItemLink))
                {
                    string equipLoc = translateLoc(item.GetItemInfo.ItemEquipLoc);
                    loadWeareable(equipLoc);
                    bool equipThisItem = false;
                    float wert1 = 0; float wert2 = 0;
                    if (EquippedItem1 != null) { wert1 = getItemValue(EquippedItem1); } else { wert1 = -1; }
                    if (EquippedItem2 != null) { wert2 = getItemValue(EquippedItem2); } else { wert2 = -1; }
                    if (wert2 > wert1)
                    {
                        wert1 = wert2;
                        EquippedItem1 = EquippedItem2;
                    }
                    if (itemValue > wert1) { equipThisItem = true; }
                    if (equipThisItem)
                    {
                        string debugMessage = "equipping \"" + GetItemNameFromLink(item.GetItemInfo.ItemLink) + "\" id " + item.Entry + " value " + itemValue;
                        if (EquippedItem1 != null)
                        {
                            debugMessage = debugMessage + " replacing \"" + GetItemNameFromLink(EquippedItem1.GetItemInfo.ItemLink) + "\" id " + EquippedItem1.Entry + " value " + getItemValue(EquippedItem1);
                        }
                        while (ObjectManager.Me.InCombat || ObjectManager.Me.IsDead) { Thread.Sleep(shortDelay); }
                        wManager.Wow.Helpers.ItemsManager.EquipItemByName(item.GetItemInfo.ItemName);
                        Thread.Sleep(shortDelay);
                        Lua.LuaDoString<string>("EquipPendingItem(0);");
                        Thread.Sleep(longDelay);
                        getEquippedItems();
                        if (!itemIsEquipped(item))
                        {
                            ButlerBlackListSettings.CurrentSetting.blackItems.Add(item.GetItemInfo.ItemLink);
                            ButlerBlackListSettings.CurrentSetting.Save();
                            Logging.Write(ButlerPrefix + "item \"" + GetItemNameFromLink(item.GetItemInfo.ItemLink) + "\" id " + item.Entry + " blacklisted");
                        }
                        else Logging.Write(ButlerPrefix + debugMessage);
                    }
                }
            }
            else
            {
                if (!ButlerBlackListSettings.CurrentSetting.blackItems.Contains(item.GetItemInfo.ItemLink))
                {
                    ButlerBlackListSettings.CurrentSetting.blackItems.Add(item.GetItemInfo.ItemLink);
                    ButlerBlackListSettings.CurrentSetting.Save();
                    Logging.WriteDebug(ButlerPrefix + "item \"" + GetItemNameFromLink(item.GetItemInfo.ItemLink) + "\" id " + item.Entry + " reports no stats - blacklisted");
                }
            }
        }
    }

    private float getItemValue(WoWItem item)
    {
        float itemValue = 0;
        if (item != null)
        {
            itemValue = getItemOverride(item);
            if (itemValue == -1701)
            {
                itemValue = 0;
                string itemLink = item.GetItemInfo.ItemLink;
                if (!itemValues.TryGetValue(itemLink, out itemValue))
                {
                    string tooltipText = getItemStats(item);
                    itemValue = getItemStatValue(tooltipText);
                    itemValues.Add(itemLink, itemValue);
                    Logging.WriteDebug(ButlerPrefix + "acknowledging item \"" + GetItemNameFromLink(item.GetItemInfo.ItemLink) + "\" id " + item.Entry + " with a value of " + itemValue);
                }
            }
        }
        return itemValue;
    }

    private int getItemOverride(WoWItem item)
    {
        int itemValue = -1701;
        if (item != null)
        {
            int itemEntry = item.Entry;
            if (!itemValueOverrides.TryGetValue(itemEntry, out itemValue))
            {
                itemValue = -1701;
            }
            else
            {
                //				Logging.WriteDebug(ButlerPrefix+"overrides item \""+GetItemNameFromLink(item.GetItemInfo.ItemLink)+"\" id "+item.Entry+" with a value of "+itemValue);
            }
        }
        return itemValue;
    }

    private void getitemValueOverrides()
    {
        int itemEntry = 0; int itemValue = 0; int converted = 0;
        string[] KeyPair = ButlerGlobalSettings.CurrentSetting.ItemValueOverrides.Split(',');
        foreach (string Key in KeyPair)
        {
            itemEntry = 0; itemValue = 0; converted = 0;
            string[] KeyValue = Key.Split(':');
            if (int.TryParse(KeyValue[0], out itemEntry)) { converted = converted + 1; };
            if (int.TryParse(KeyValue[1], out itemValue)) { converted = converted + 1; };
            if (converted == 2) { itemValueOverrides.Add(itemEntry, itemValue); }
        }
    }

    private void getBagItems()
    {
        bagItems = wManager.Wow.Helpers.Bag.GetBagItem();
    }

    private void getEquippedItems()
    {
        EquippedItems = wManager.Wow.Helpers.EquippedItems.GetEquippedItems();
    }

    private string translateLoc(string equipLoc)
    {
        string adjustedLoc = "";
        if (equipLoc == "INVTYPE_AMMO") { adjustedLoc = "0"; }
        if (equipLoc == "INVTYPE_HEAD") { adjustedLoc = "1"; }
        if (equipLoc == "INVTYPE_NECK") { adjustedLoc = "2"; }
        if (equipLoc == "INVTYPE_SHOULDER") { adjustedLoc = "3"; }
        if (equipLoc == "INVTYPE_BODY") { adjustedLoc = "4"; }
        if (equipLoc == "INVTYPE_CHEST") { adjustedLoc = "5"; }
        if (equipLoc == "INVTYPE_ROBE") { adjustedLoc = "5"; }
        if (equipLoc == "INVTYPE_WAIST") { adjustedLoc = "6"; }
        if (equipLoc == "INVTYPE_LEGS") { adjustedLoc = "7"; }
        if (equipLoc == "INVTYPE_FEET") { adjustedLoc = "8"; }
        if (equipLoc == "INVTYPE_WRIST") { adjustedLoc = "9"; }
        if (equipLoc == "INVTYPE_HAND") { adjustedLoc = "10"; }
        if (equipLoc == "INVTYPE_FINGER") { adjustedLoc = "11"; }
        if (equipLoc == "INVTYPE_TRINKET") { adjustedLoc = "13"; }
        if (equipLoc == "INVTYPE_CLOAK") { adjustedLoc = "15"; }
        if (equipLoc == "INVTYPE_WEAPON") { adjustedLoc = "16"; }
        if (equipLoc == "INVTYPE_SHIELD") { adjustedLoc = "17"; }
        if (equipLoc == "INVTYPE_2HWEAPON") { adjustedLoc = "16"; }
        if (equipLoc == "INVTYPE_WEAPONMAINHAND") { adjustedLoc = "16"; }
        if (equipLoc == "INVTYPE_WEAPONOFFHAND") { adjustedLoc = "17"; }
        if (equipLoc == "INVTYPE_HOLDABLE") { adjustedLoc = "17"; }
        if (equipLoc == "INVTYPE_RANGED") { adjustedLoc = "18"; }
        if (equipLoc == "INVTYPE_THROWN") { adjustedLoc = "18"; }
        if (equipLoc == "INVTYPE_RANGEDRIGHT") { adjustedLoc = "18"; }
        if (equipLoc == "INVTYPE_RELIC") { adjustedLoc = "18"; }
        if (equipLoc == "INVTYPE_TABARD") { adjustedLoc = "19"; }
        if (equipLoc == "INVTYPE_BAG") { adjustedLoc = "20"; }
        if (equipLoc == "INVTYPE_QUIVER") { adjustedLoc = "20"; }
        return adjustedLoc;
    }

    private void loadWeareable(string equipLoc)
    {
        bool loadFirst = true;
        EquippedItem1 = null;
        EquippedItem2 = null;
        foreach (WoWItem item in EquippedItems)
        {
            if (equipLoc == translateLoc(item.GetItemInfo.ItemEquipLoc))
            {
                if (loadFirst)
                {
                    EquippedItem1 = item;
                    loadFirst = false;
                }
                else { EquippedItem2 = item; }
            }
        }
    }

    private bool itemIsEquipped(WoWItem newItem)
    {
        bool isEquipped = false;
        foreach (WoWItem item in EquippedItems) { if (newItem.GetItemInfo.ItemLink == item.GetItemInfo.ItemLink) { isEquipped = true; } }
        return isEquipped;
    }

    private string ConvertStatToEnglish(string russianStat)
    {
        string normalized = russianStat.ToLowerInvariant().Trim();

        Dictionary<string, string> statTranslations = new Dictionary<string, string>
{
    { "интеллекту", "INTELLECT" },
    { "интеллект", "INTELLECT" },
    { "рейтинг критического удара", "CRIT_RATING" },
    { "рейтинг парирования", "PARRY_RATING" },
    { "рейтинг меткости", "HIT_RATING" },
    { "сила заклинаний", "SPELL_POWER" },
    { "выносливость", "STAMINA" },
    { "выносливости", "STAMINA" },
    { "мана в 5 сек.", "MANA_REGENERATION" },
    { "рейтинг мастерства", "EXPERTISE_RATING" },
    { "сила атаки", "ATTACK_POWER" },
    { "силе атаки", "ATTACK_POWER" },         // ← добавлено
    { "броня", "ARMOR" },
    { "дух", "SPIRIT" },
    { "урон в секунду", "DAMAGE_PER_SECOND" },
    { "сила", "STRENGTH" },
    { "силе", "STRENGTH" },                   // ← добавлено
    { "ловкость", "AGILITY" },
    { "ловкости", "AGILITY" },                // ← добавлено
    { "рейтинг уклонения", "DODGE_RATING" },
    { "рейтинг защиты", "DEFENSE_SKILL_RATING" },
    { "рейтингу защиты", "DEFENSE_SKILL_RATING" } // ← уже добавлено
};
        foreach (var pair in statTranslations)
        {
            if (normalized.Contains(pair.Key))
                return pair.Value;
        }

        return ""; // неизвестный стат
    }


    private float getItemStatValue(string tooltipText)
    {
        float itemWert = 0;
        WoWClass playerClass = ObjectManager.Me.WowClass;
        bool hasCustomMultipliers = ButlerSettings.ClassMultipliers.ContainsKey(playerClass);

        string[] lines = tooltipText.Split(';')
            .Select(l => l.Trim())
            .Where(l => !string.IsNullOrWhiteSpace(l))
            .ToArray();

        // Основные паттерны
        var patterns = new List<Regex>
    {
        new Regex(@"\+(\d+)\s+к\s+(.+)", RegexOptions.IgnoreCase),         
        new Regex(@"(.+):\s*(\d+)", RegexOptions.IgnoreCase),             
        new Regex(@"Если на персонаже: .*?(\d+)\s+(.+)", RegexOptions.IgnoreCase) // 
    };

        foreach (string rawLine in lines)
        {
            string line = Regex.Replace(rawLine, @"\|c[0-9a-fA-F]{8}|\|r", "").Trim(); // убираем цветовые коды

            foreach (var pattern in patterns)
            {
                var match = pattern.Match(line);
                if (match.Success)
                {
                    string statNameRaw = match.Groups[1].Value;
                    string statValueStr = match.Groups[2].Value;

                    if (!float.TryParse(statValueStr, NumberStyles.Any, CultureInfo.InvariantCulture, out float statValue))
                        continue;

                    string statKey = ConvertStatToEnglish(statNameRaw.ToLower().Trim());
                    if (string.IsNullOrWhiteSpace(statKey))
                        continue;

                    Logging.WriteDebug($"[STAT] Строка: {rawLine} → Стат: {statKey}, Значение: {statValue}");


                    float multiplier = 0;
                    if (hasCustomMultipliers && ButlerSettings.ClassMultipliers[playerClass].ContainsKey(statKey))
                        multiplier = ButlerSettings.ClassMultipliers[playerClass][statKey];
                    else
                    {
                        var prop = typeof(ButlerSettings).GetProperty($"multi{statKey}", BindingFlags.Public | BindingFlags.Instance);
                        if (prop != null)
                            multiplier = (float)prop.GetValue(ButlerSettings.CurrentSetting);
                    }

                    if (multiplier > 0)
                        itemWert += statValue * multiplier;
                }
            }
        }

        return itemWert;
    }

    private string getItemStats(WoWItem item)
    {
        List<int> bagSlot = Bag.GetItemContainerBagIdAndSlot(item.Entry);
        if (bagSlot == null || bagSlot.Count < 2)
            return "";

        int bag = bagSlot[0];
        int slot = bagSlot[1];

        // Создание и установка тултипа
        Lua.LuaDoString($@"
        if not MyScanTooltip then
            MyScanTooltip = CreateFrame('GameTooltip','MyScanTooltip',nil,'GameTooltipTemplate')
            MyScanTooltip:SetOwner(UIParent,'ANCHOR_NONE')
        end
        MyScanTooltip:ClearLines()
        MyScanTooltip:SetBagItem({bag}, {slot})
    ");

        Thread.Sleep(100); // даём клиенту немного времени

        // Новый парсинг в стиле рабочей версии
        string lua = @"
        local t = {}
        for i = 2, 15 do
            local txt = _G['MyScanTooltipTextLeft'..i]
            if txt then
                local line = txt:GetText()
                if line then
                    line = line:gsub('|c%x%x%x%x%x%x%x%x', ''):gsub('|r', ''):gsub(',', '.')

                    local v1, k1 = line:match('%+?(%d+)%s+к%s+(.+)')
                    if v1 and k1 then
                        t[k1] = tonumber(v1)
                    else
                        local k2, v2 = line:match('(.+):%s*(%d+)')
                        if k2 and v2 then
                            t[k2] = tonumber(v2)
                        else
                            local v3, k3 = line:match('Если на персонаже: .*на%s+(%d+).*([%a%s]+)')
                            if v3 and k3 then
                                t[k3] = tonumber(v3)
                            end
                        end
                    end
                end
            end
        end
        stats4butler = ''
        for k,v in pairs(t) do
            stats4butler = stats4butler .. k .. ':' .. v .. ';'
        end
    ";

        string itemStats = Lua.LuaDoString(lua, "stats4butler");

        Logging.WriteDebug($"[DEBUG] Проверка статов предмета: {GetItemNameFromLink(item.GetItemInfo.ItemLink)}, Lua-возвращает: \"{itemStats}\"");

        return itemStats;
    }



    private string GetItemNameFromLink(string itemLink)
    {
        if (string.IsNullOrEmpty(itemLink)) return "";
        int start = itemLink.IndexOf("|h[") + 3;
        int end = itemLink.IndexOf("]|h");
        if (start >= 0 && end > start)
        {
            return itemLink.Substring(start, end - start);
        }
        return itemLink;
    }


    private string[] getItemStatConstants()
    {
        string luacommand = "stats4butler=ITEM_MOD_AGILITY_SHORT .. \";\".. " +
                                "ITEM_MOD_ARMOR_PENETRATION_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_ATTACK_POWER_SHORT .. \";\".. " +
                                "ITEM_MOD_BLOCK_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_BLOCK_VALUE_SHORT .. \";\".. " +
                                "ITEM_MOD_CRIT_MELEE_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_CRIT_RANGED_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_CRIT_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_CRIT_SPELL_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_DAMAGE_PER_SECOND_SHORT .. \";\".. " +
                                "ITEM_MOD_DEFENSE_SKILL_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_DODGE_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_EXPERTISE_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_FERAL_ATTACK_POWER_SHORT .. \";\".. " +
                                "ITEM_MOD_HASTE_MELEE_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_HASTE_RANGED_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_HASTE_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_HASTE_SPELL_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_HEALTH_SHORT .. \";\".. " +
                                "ITEM_MOD_HEALTH_REGENERATION_SHORT .. \";\".. " +
                                "ITEM_MOD_HIT_MELEE_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_HIT_RANGED_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_HIT_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_HIT_SPELL_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_HIT_TAKEN_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_HIT_TAKEN_SPELL_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_HIT_TAKEN_MELEE_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_HIT_TAKEN_RANGED_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_INTELLECT_SHORT .. \";\".. " +
                                "ITEM_MOD_MANA_SHORT .. \";\".. " +
                                "ITEM_MOD_MANA_REGENERATION_SHORT .. \";\".. " +
                                "ITEM_MOD_MELEE_ATTACK_POWER_SHORT .. \";\".. " +
                                "ITEM_MOD_PARRY_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_RANGED_ATTACK_POWER_SHORT .. \";\".. " +
                                "ITEM_MOD_RESILIENCE_RATING_SHORT .. \";\".. " +
                                "ITEM_MOD_SPELL_DAMAGE_DONE_SHORT .. \";\".. " +
                                "ITEM_MOD_SPELL_HEALING_DONE_SHORT .. \";\".. " +
                                "ITEM_MOD_SPELL_POWER_SHORT .. \";\".. " +
                                "ITEM_MOD_SPELL_PENETRATION_SHORT .. \";\".. " +
                                "ITEM_MOD_SPIRIT_SHORT .. \";\".. " +
                                "ITEM_MOD_STAMINA_SHORT .. \";\".. " +
                                "ITEM_MOD_STRENGTH_SHORT";
        string statConstants = Lua.LuaDoString(luacommand, "stats4butler");
        string[] statConstantsArray = statConstants.Split(';');
        return statConstantsArray;
    }

    public void Dispose()
    {
        ButlerLaunched = false;
        QuestRewardSelector.Dispose(); // Отключаем авто-выбор наград
        BagEquipManager.Dispose(); // Отключаем авто-экипировку сумок
        _timer?.Stop(); // Останавливаем таймер при завершении
        _timer?.Dispose(); // Освобождаем ресурсы

        if (_macroPlugin != null)
        {
            _macroPlugin.Dispose();

            if (swimUpPlugin != null)
            {
                swimUpPlugin.Dispose(); // Останавливаем плагин при завершении
            }
        }
    }

    public void Settings()
    {
        ButlerSettings.Load();
        ButlerSettings.CurrentSetting.ToForm();
        ButlerSettings.CurrentSetting.Save();
        ButlerGlobalSettings.Load();
        ButlerGlobalSettings.CurrentSetting.ToForm();
        ButlerGlobalSettings.CurrentSetting.Save();
        ButlerBlackListSettings.Load();
        ButlerBlackListSettings.CurrentSetting.Save();
    }
}


public class ButlerBlackListSettings : Settings
{
    public ButlerBlackListSettings()
    {
        blackItems = new List<string>();
        playerLevel = 0;
    }

    public static ButlerBlackListSettings CurrentSetting { get; set; }

    public bool Save()
    {
        try { return Save(AdviserFilePathAndName("Butler", ObjectManager.Me.Name + ".Blacklist." + wManager.Wow.Helpers.Usefuls.RealmName)); }
        catch (Exception e) { Logging.WriteDebug("Butler failed to save blacklist settings because of: " + e); return false; }
    }

    public static bool Load()
    {
        try
        {
            if (File.Exists(AdviserFilePathAndName("Butler", ObjectManager.Me.Name + ".Blacklist." + wManager.Wow.Helpers.Usefuls.RealmName)))
            {
                CurrentSetting = Load<ButlerBlackListSettings>(AdviserFilePathAndName("Butler", ObjectManager.Me.Name + ".Blacklist." + wManager.Wow.Helpers.Usefuls.RealmName));
                return true;
            }
            CurrentSetting = new ButlerBlackListSettings();
        }
        catch (Exception e)
        {
            Logging.WriteDebug("Butler failed to load blacklist settings because of: " + e);
        }
        return false;
    }

    [Setting]
    [Category("Blacklist Settings")]
    [DisplayName("Blacklisted Items")]
    [Description("Comma-separated ItemsIDs that missed to be equipped")]
    public List<string> blackItems { get; set; }

    [Setting]
    [Category("Blacklist Settings")]
    [DisplayName("Player level")]
    [Description("Player level")]
    public uint playerLevel { get; set; }
}


public class ButlerGlobalSettings : Settings
{
    public ButlerGlobalSettings()
    {
        ItemValueOverrides = "2586:0,11508:0,12064:0";
        pulseDelay = 3000;
        gameVersion = "3.3.5";
    }

    public static ButlerGlobalSettings CurrentSetting { get; set; }

    public bool Save()
    {
        try { return Save(AdviserFilePathAndName("Butler", "Globals")); }
        catch (Exception e) { Logging.WriteDebug("Butler failed to save global settings because of: " + e); return false; }
    }

    public static bool Load()
    {
        try
        {
            if (File.Exists(AdviserFilePathAndName("Butler", "Globals")))
            {
                CurrentSetting = Load<ButlerGlobalSettings>(AdviserFilePathAndName("Butler", "Globals"));
                return true;
            }
            CurrentSetting = new ButlerGlobalSettings();
        }
        catch (Exception e)
        {
            Logging.WriteDebug("Butler failed to load global settings because of: " + e);
        }
        return false;
    }

    [Setting]
    [Category("Game Settings")]
    [DisplayName("Game version")]
    [Description("Apply game version to the client running")]
    public string gameVersion { get; set; }

    [Setting]
    [Category("Global Settings")]
    [DisplayName("Item value overrides")]
    [Description("Comma-separated ItemID:value pairs to fix the item value calculation - 2586:0 would never, 2586:99999999 would everytime equip my gamemaster robe")]
    public string ItemValueOverrides { get; set; }

    [Setting]
    [Category("Global Settings")]
    [DisplayName("Pulse delay")]
    [Description("Time in milliseconds between butler pulses (3000 by default)")]
    public int pulseDelay { get; set; }
}


public class ButlerSettings : Settings

{
    public static Dictionary<WoWClass, Dictionary<string, float>> ClassMultipliers = new Dictionary<WoWClass, Dictionary<string, float>>
{
    { WoWClass.Druid, new Dictionary<string, float>
        {
            { "STAMINA", 10 },
            { "INTELLECT", 100 },
            { "SPIRIT", 100 },
            { "SPELL_POWER", 100 },
            { "CRIT_RATING", 90 },
            { "HASTE_RATING", 80 },
            { "HIT_RATING", 100 },
            { "ARMOR", 1 }, 
        }
    },
    { WoWClass.Paladin, new Dictionary<string, float>
        {
            { "STAMINA", 10 },
            { "STRENGTH", 100 },
            { "AGILITY", 40 },
            { "DAMAGE_PER_SECOND", 100 }, // Weapon DPS
            { "ATTACK_POWER", 80 },
            { "SPELL_POWER", 10 },
            { "CRIT_RATING", 50 },
            { "HASTE_RATING", 80 },
            { "HIT_RATING", 100 },
            { "EXPERTISE_RATING", 100 },
            { "ARMOR_PENETRATION_RATING", 100 },
            { "ARMOR", 1 },
        }
    },
            { WoWClass.Rogue, new Dictionary<string, float>
        {
            { "STAMINA", 10 },
            { "STRENGTH", 550 },
            { "AGILITY", 1000 },
            { "DAMAGE_PER_SECOND", 2200 }, // Weapon DPS
            { "ATTACK_POWER", 500 },
            { "SPELL_POWER", 10 },
            { "CRIT_RATING", 750 },
            { "HASTE_RATING", 730 },
            { "HIT_RATING", 800 },
            { "EXPERTISE_RATING", 820 },
            { "ARMOR_PENETRATION_RATING", 1000 },
            { "ARMOR", 10 },
        }
    }
};
    public ButlerSettings()
    {
        DestroyGray = false;
        EquipGray = true;
        EquipWhite = true;
        EquipGreen = true;
        EquipBlue = true;
        EquipEpic = true;
        EquipLegendary = true;
        multiARMOR = 10;
        multiAGILITY = 100;
        multiARMOR_PENETRATION_RATING = 100;
        multiATTACK_POWER = 100;
        multiBLOCK_RATING = 100;
        multiBLOCK_VALUE = 100;
        multiCRIT_MELEE_RATING = 100;
        multiCRIT_RANGED_RATING = 100;
        multiCRIT_RATING = 100;
        multiCRIT_SPELL_RATING = 100;
        multiDAMAGE_PER_SECOND = 5;
        multiDEFENSE_SKILL_RATING = 100;
        multiDODGE_RATING = 100;
        multiEXPERTISE_RATING = 100;
        multiFERAL_ATTACK_POWER = 100;
        multiHASTE_MELEE_RATING = 100;
        multiHASTE_RANGED_RATING = 100;
        multiHASTE_RATING = 100;
        multiHASTE_SPELL_RATING = 100;
        multiHEALTH = 100;
        multiHEALTH_REGENERATION = 100;
        multiHIT_MELEE_RATING = 100;
        multiHIT_RANGED_RATING = 100;
        multiHIT_RATING = 100;
        multiHIT_SPELL_RATING = 100;
        multiHIT_TAKEN_RATING = 100;
        multiHIT_TAKEN_SPELL_RATING = 100;
        multiHIT_TAKEN_MELEE_RATING = 100;
        multiHIT_TAKEN_RANGED_RATING = 100;
        multiINTELLECT = 100;
        multiMANA = 100;
        multiMANA_REGENERATION = 100;
        multiMELEE_ATTACK_POWER = 100;
        multiPARRY_RATING = 100;
        multiRANGED_ATTACK_POWER = 100;
        multiRESILIENCE_RATING = 100;
        multiSPELL_DAMAGE_DONE = 100;
        multiSPELL_HEALING_DONE = 100;
        multiSPELL_POWER = 100;
        multiSPELL_PENETRATION = 100;
        multiSPIRIT = 100;
        multiSTAMINA = 100;
        multiSTRENGTH = 100;
    }
    public static ButlerSettings CurrentSetting { get; set; }

    public bool Save()
    {
        try { return Save(AdviserFilePathAndName("Butler", ObjectManager.Me.Name + "." + wManager.Wow.Helpers.Usefuls.RealmName)); }
        catch (Exception e) { Logging.WriteDebug("Butler failed to save settings because of: " + e); return false; }
    }

    public static bool Load()
    {
        try
        {
            if (File.Exists(AdviserFilePathAndName("Butler", ObjectManager.Me.Name + "." + wManager.Wow.Helpers.Usefuls.RealmName)))
            {
                CurrentSetting = Load<ButlerSettings>(AdviserFilePathAndName("Butler", ObjectManager.Me.Name + "." + wManager.Wow.Helpers.Usefuls.RealmName));
                return true;
            }
            CurrentSetting = new ButlerSettings();
        }
        catch (Exception e)
        {
            Logging.WriteDebug("Butler failed to load settings because of: " + e);
        }
        return false;
    }

    [Setting]
    [Category("Common Settings")]
    [DisplayName("Destroy poor")]
    [Description("Destroy poor (gray) items in inventory")]
    public bool DestroyGray { get; set; }

    [Setting]
    [Category("Common Settings")]
    [DisplayName("Equip poor")]
    [Description("Equip poor (gray) items on pickup")]
    public bool EquipGray { get; set; }

    [Setting]
    [Category("Common Settings")]
    [DisplayName("Equip common")]
    [Description("Equip common (white) items on pickup")]
    public bool EquipWhite { get; set; }

    [Setting]
    [Category("Common Settings")]
    [DisplayName("Equip uncommon")]
    [Description("Equip uncommon (green) items on pickup")]
    public bool EquipGreen { get; set; }

    [Setting]
    [Category("Common Settings")]
    [DisplayName("Equip rare")]
    [Description("Equip rare (blue) items on pickup")]
    public bool EquipBlue { get; set; }

    [Setting]
    [Category("Common Settings")]
    [DisplayName("Equip epic")]
    [Description("Equip epic (purple) items on pickup")]
    public bool EquipEpic { get; set; }

    [Setting]
    [Category("Common Settings")]
    [DisplayName("Equip legendary")]
    [Description("Equip legendary items on pickup")]
    public bool EquipLegendary { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("AGILITY")]
    [Description("Multiplier for Agility")]
    public float multiAGILITY { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("ARMOR_PENETRATION_RATING")]
    [Description("Multiplier for Armor Penetration")]
    public float multiARMOR_PENETRATION_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("ATTACK_POWER")]
    [Description("Multiplier for Attack Power")]
    public float multiATTACK_POWER { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("BLOCK_RATING")]
    [Description("Multiplier for Block rating")]
    public float multiBLOCK_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("BLOCK_VALUE")]
    [Description("Multiplier for Block value")]
    public float multiBLOCK_VALUE { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("CRIT_MELEE_RATING")]
    [Description("Multiplier for Crit (melee)")]
    public float multiCRIT_MELEE_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("CRIT_RANGED_RATING")]
    [Description("Multiplier for Crit (ranged)")]
    public float multiCRIT_RANGED_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("CRIT_RATING")]
    [Description("Multiplier for Crit")]
    public float multiCRIT_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("CRIT_SPELL_RATING")]
    [Description("Multiplier for Crit (spell)")]
    public float multiCRIT_SPELL_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("DAMAGE_PER_SECOND")]
    [Description("Multiplier for DPS")]
    public float multiDAMAGE_PER_SECOND { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("DEFENSE_SKILL_RATING")]
    [Description("Multiplier for Defense")]
    public float multiDEFENSE_SKILL_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("DODGE_RATING")]
    [Description("Multiplier for Dodge")]
    public float multiDODGE_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("EXPERTISE_RATING")]
    [Description("Multiplier for Expertise")]
    public float multiEXPERTISE_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("FERAL_ATTACK_POWER")]
    [Description("Multiplier for Feral Attack Power")]
    public float multiFERAL_ATTACK_POWER { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("HASTE_MELEE_RATING")]
    [Description("Multiplier for Haste (melee)")]
    public float multiHASTE_MELEE_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("HASTE_RANGED_RATING")]
    [Description("Multiplier for Haste (ranged)")]
    public float multiHASTE_RANGED_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("HASTE_RATING")]
    [Description("Multiplier for Haste")]
    public float multiHASTE_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("HASTE_SPELL_RATING")]
    [Description("Multiplier for Haste (spell)")]
    public float multiHASTE_SPELL_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("HEALTH")]
    [Description("Multiplier for Health")]
    public float multiHEALTH { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("HEALTH_REGENERATION")]
    [Description("Multiplier for Health Regeneration (Hp5)")]
    public float multiHEALTH_REGENERATION { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("HIT_MELEE_RATING")]
    [Description("Multiplier for Hit (melee)")]
    public float multiHIT_MELEE_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("HIT_RANGED_RATING")]
    [Description("Multiplier for Hit (ranged)")]
    public float multiHIT_RANGED_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("HIT_RATING")]
    [Description("Multiplier for Hit")]
    public float multiHIT_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("HIT_SPELL_RATING")]
    [Description("Multiplier for Hit (spell)")]
    public float multiHIT_SPELL_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("HIT_TAKEN_RATING")]
    [Description("Multiplier for Miss")]
    public float multiHIT_TAKEN_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("HIT_TAKEN_SPELL_RATING")]
    [Description("Multiplier for Spell miss")]
    public float multiHIT_TAKEN_SPELL_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("HIT_TAKEN_MELEE_RATING")]
    [Description("Multiplier for Melee miss")]
    public float multiHIT_TAKEN_MELEE_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("HIT_TAKEN_RANGED_RATING")]
    [Description("Multiplier for Ranged miss")]
    public float multiHIT_TAKEN_RANGED_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("INTELLECT")]
    [Description("Multiplier for Intellect")]
    public float multiINTELLECT { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("MANA")]
    [Description("Multiplier for Mana")]
    public float multiMANA { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("MANA_REGENERATION")]
    [Description("Multiplier for Mana Regeneration (Mp5)")]
    public float multiMANA_REGENERATION { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("MELEE_ATTACK_POWER")]
    [Description("Multiplier for Attack Power (melee)")]
    public float multiMELEE_ATTACK_POWER { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("PARRY_RATING")]
    [Description("Multiplier for Parry")]
    public float multiPARRY_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("RANGED_ATTACK_POWER")]
    [Description("Multiplier for Attack Power (ranged)")]
    public float multiRANGED_ATTACK_POWER { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("RESILIENCE_RATING")]
    [Description("Multiplier for Resilience")]
    public float multiRESILIENCE_RATING { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("SPELL_DAMAGE_DONE")]
    [Description("Multiplier for Spellpower")]
    public float multiSPELL_DAMAGE_DONE { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("SPELL_HEALING_DONE")]
    [Description("Multiplier for Healing")]
    public float multiSPELL_HEALING_DONE { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("SPELL_POWER")]
    [Description("Multiplier for Spellpower")]
    public float multiSPELL_POWER { get; set; }

    [Setting]
    [Category("Item stats multiplier SECONDARY")]
    [DisplayName("SPELL_PENETRATION")]
    [Description("Multiplier for Penetration")]
    public float multiSPELL_PENETRATION { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("SPIRIT")]
    [Description("Multiplier for Spirit")]
    public float multiSPIRIT { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("STAMINA")]
    [Description("Multiplier for Stamina")]
    public float multiSTAMINA { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("STRENGTH")]
    [Description("Multiplier for Strength")]
    public float multiSTRENGTH { get; set; }

    [Setting]
    [Category("Item stats multiplier BASIC")]
    [DisplayName("multiARMOR")]
    [Description("Multiplier for multiARMOR")]
    public float multiARMOR { get; set; } = 10; // Добавляем множитель для брони


    [Setting]
    [Category("Quest Settings")]
    [DisplayName("Auto Select Quest Rewards")]
    [Description("Automatically selects the best quest reward based on character stats.")]
    public bool AutoSelectQuestRewards { get; set; } = true;

}

